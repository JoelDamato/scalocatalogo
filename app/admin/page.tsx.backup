'use client'

import { useState, useEffect } from 'react'
import { supabase } from '../../src/lib/supabase'
import Link from 'next/link'
import AdminAuth from "../../src/components/AdminAuth"
import AdminNavbar from "../../src/components/AdminNavbar"
import { useAuth } from "../../src/hooks/useAuth"
import { toast } from 'react-toastify'
import { confirmAlert } from 'react-confirm-alert'
import 'react-confirm-alert/src/react-confirm-alert.css'
import { createButtonProps } from '../../src/utils/buttonStyles'

interface Producto {
  id: string
  nombre: string
  descripcion: string | null
  categoria: string | null
  precio: number | null
  costo: number | null
  porcentaje_ganancia: number | null
  foto_url: string | null
  publicado: boolean
  created_at: string
  updated_at: string
}

interface ProductoPopular {
  id: string
  nombre: string
  foto_url: string | null
  precio: number | null
  costo: number | null
  total_selecciones: number
}

export default function AdminPage() {
  const { isAuthenticated, loading: authLoading } = useAuth()
  const [productos, setProductos] = useState<Producto[]>([])
  const [productosPopulares, setProductosPopulares] = useState<ProductoPopular[]>([])
  const [productosFacturados, setProductosFacturados] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [mostrarFormulario, setMostrarFormulario] = useState(false)
  const [mostrarCargaCSV, setMostrarCargaCSV] = useState(false)
  const [archivoCSV, setArchivoCSV] = useState<File | null>(null)
  const [cargandoCSV, setCargandoCSV] = useState(false)
  const [productoEditando, setProductoEditando] = useState<Producto | null>(null)
  const [isVisible, setIsVisible] = useState(false)
  // Siempre mostrar vista de tabla
  const [margenesPersonalizados, setMargenesPersonalizados] = useState<{[key: string]: number}>({})
  const [margenGlobal, setMargenGlobal] = useState<number>(0)
  const [productosModificados, setProductosModificados] = useState<Set<string>>(new Set())
  const [costosModificados, setCostosModificados] = useState<Set<string>>(new Set())
  const [mostrarEdicionMasiva, setMostrarEdicionMasiva] = useState(false)
  const [formData, setFormData] = useState({
    nombre: '',
    descripcion: '',
    categoria: '',
    precio: '',
    costo: '',
    porcentaje_ganancia: '50', // 50% por defecto
    foto_url: '',
    publicado: true
  })
  const [calcularPrecioAutomatico, setCalcularPrecioAutomatico] = useState(true)
  const [subiendoImagen, setSubiendoImagen] = useState(false)
  const [busquedaAdmin, setBusquedaAdmin] = useState('')
  const [productosFiltrados, setProductosFiltrados] = useState<Producto[]>([])
  const [isMobile, setIsMobile] = useState(true) // Inicializar como true para evitar flash

  // Detectar tamaño de pantalla
  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth <= 768)
    }
    
    checkScreenSize()
    window.addEventListener('resize', checkScreenSize)
    
    return () => window.removeEventListener('resize', checkScreenSize)
  }, [])

  // Efecto para recalcular precio cuando cambian costo/porcentaje y está en modo automático
  useEffect(() => {
    console.log('useEffect ejecutado:', { 
      calcularPrecioAutomatico, 
      costo: formData.costo, 
      porcentaje: formData.porcentaje_ganancia,
      productoEditando: productoEditando?.id
    })
    
    if (calcularPrecioAutomatico && formData.costo && formData.porcentaje_ganancia) {
      const costoNum = parseFloat(formData.costo)
      const porcentajeNum = parseFloat(formData.porcentaje_ganancia)
      
      if (!isNaN(costoNum) && !isNaN(porcentajeNum) && costoNum > 0) {
        const nuevoPrecio = (costoNum * (1 + porcentajeNum / 100)).toFixed(2)
        console.log('Calculando precio:', { costoNum, porcentajeNum, nuevoPrecio })
        
        if (nuevoPrecio !== formData.precio) {
          console.log('Actualizando precio de', formData.precio, 'a', nuevoPrecio)
          setFormData(prev => ({ ...prev, precio: nuevoPrecio }))
        }
      }
    }
  }, [formData.costo, formData.porcentaje_ganancia, calcularPrecioAutomatico, productoEditando])

  // Efecto para filtrar productos
  useEffect(() => {
    if (busquedaAdmin.trim() === '') {
      setProductosFiltrados(productos)
    } else {
      const filtrados = productos.filter(producto =>
        producto.nombre.toLowerCase().includes(busquedaAdmin.toLowerCase()) ||
        (producto.descripcion && producto.descripcion.toLowerCase().includes(busquedaAdmin.toLowerCase())) ||
        (producto.categoria && producto.categoria.toLowerCase().includes(busquedaAdmin.toLowerCase()))
      )
      setProductosFiltrados(filtrados)
    }
  }, [productos, busquedaAdmin])

  // Función para calcular precio automáticamente
  const calcularPrecioVenta = (costo: string, porcentaje: string, forzarCalculo: boolean = false) => {
    if ((calcularPrecioAutomatico || forzarCalculo) && costo && porcentaje) {
      const costoNum = parseFloat(costo)
      const porcentajeNum = parseFloat(porcentaje)
      if (!isNaN(costoNum) && !isNaN(porcentajeNum) && costoNum > 0) {
        const precio = costoNum * (1 + porcentajeNum / 100)
        return precio.toFixed(2)
      }
    }
    return ''
  }

  // Manejar cambios en costo
  const manejarCambioCosto = (valor: string) => {
    console.log('Cambiando costo a:', valor)
    setFormData(prev => ({
      ...prev,
      costo: valor
    }))
  }

  // Manejar cambios en porcentaje
  const manejarCambioPorcentaje = (valor: string) => {
    console.log('Cambiando porcentaje a:', valor)
    setFormData(prev => ({
      ...prev,
      porcentaje_ganancia: valor
    }))
  }

  useEffect(() => {
    if (isAuthenticated && !authLoading) {
      setIsVisible(true)
      cargarDatos()
    }
  }, [isAuthenticated, authLoading])

  const cargarDatos = async () => {
    await Promise.all([
      cargarProductos(),
      cargarProductosPopulares(),
      cargarProductosFacturados(),
      cargarMargenesPersonalizados()
    ])
    setLoading(false)
  }

  const cargarProductos = async () => {
    try {
      const { data, error } = await supabase
        .from('productos')
        .select('*')
        .order('created_at', { ascending: false })

      if (error) {
        console.error('Error cargando productos:', error)
        return
      }

      setProductos(data || [])
    } catch (error) {
      console.error('Error:', error)
    }
  }

  const cargarMargenesPersonalizados = async () => {
    try {
      // Cargar márgenes desde la tabla productos
      const { data: productosData, error: productosError } = await supabase
        .from('productos')
        .select('id, porcentaje_ganancia')

      if (productosError) {
        console.error('Error cargando márgenes de productos:', productosError)
        return
      }

      // Organizar los márgenes por producto desde la tabla productos
      const margenesOrganizados: {[productoId: string]: number} = {}
      productosData?.forEach(producto => {
        if (producto.porcentaje_ganancia !== null && producto.porcentaje_ganancia !== undefined) {
          margenesOrganizados[producto.id] = producto.porcentaje_ganancia
        }
      })

      console.log('Márgenes cargados desde BD:', {
        productosData,
        margenesOrganizados,
        totalProductos: productosData?.length,
        totalMargenes: Object.keys(margenesOrganizados).length
      })
      
      setMargenesPersonalizados(margenesOrganizados)
      
      // También actualizar la lista de productos con los márgenes cargados
      setProductos(prev => prev.map(producto => {
        const margenCargado = margenesOrganizados[producto.id]
        return margenCargado !== undefined 
          ? { ...producto, porcentaje_ganancia: margenCargado }
          : producto
      }))
    } catch (error) {
      console.error('Error cargando márgenes personalizados:', error)
    }
  }

  const cargarProductosPopulares = async () => {
    try {
      const { data: selecciones, error } = await supabase
        .from('producto_selecciones')
        .select(`
          producto_id,
          productos (
            id,
            nombre,
            foto_url,
            precio,
            costo
          )
        `)

      if (error) {
        console.error('Error cargando selecciones:', error)
        return
      }

      const conteoSelecciones: { [key: string]: { producto: any, count: number } } = {}
      
      selecciones?.forEach((seleccion: any) => {
        const productoId = seleccion.producto_id
        if (conteoSelecciones[productoId]) {
          conteoSelecciones[productoId].count++
        } else {
          conteoSelecciones[productoId] = {
            producto: seleccion.productos,
            count: 1
          }
        }
      })

      const productosPopularesArray = Object.values(conteoSelecciones)
        .map(item => ({
          id: item.producto.id,
          nombre: item.producto.nombre,
          foto_url: item.producto.foto_url,
          precio: item.producto.precio,
          costo: item.producto.costo,
          total_selecciones: item.count
        }))
        .sort((a, b) => b.total_selecciones - a.total_selecciones)
        .slice(0, 5)

      setProductosPopulares(productosPopularesArray)
    } catch (error) {
      console.error('Error:', error)
    }
  }

  const cargarProductosFacturados = async () => {
    try {
      const { data: ordenes, error } = await supabase
        .from('ordenes')
        .select('productos')

      if (error) {
        console.error('Error cargando facturas:', error)
      return
    }

      // Procesar todas las facturas para calcular productos más facturados
      const facturacion: { [key: string]: { nombre: string, total: number, cantidad: number } } = {}

      ordenes?.forEach(orden => {
        orden.productos?.forEach((item: any) => {
          const productoId = item.producto_id || item.nombre // Usar nombre como fallback
          if (!facturacion[productoId]) {
            facturacion[productoId] = {
              nombre: item.nombre,
              total: 0,
              cantidad: 0
            }
          }
          facturacion[productoId].total += item.subtotal || (item.precio_unitario * item.cantidad)
          facturacion[productoId].cantidad += item.cantidad
        })
      })

      const productosFacturadosArray = Object.entries(facturacion)
        .map(([id, data]) => ({
          id,
          nombre: data.nombre,
          total_facturado: data.total,
          cantidad_vendida: data.cantidad
        }))
        .sort((a, b) => b.total_facturado - a.total_facturado)
        .slice(0, 5)

      setProductosFacturados(productosFacturadosArray)
    } catch (error) {
      console.error('Error cargando productos facturados:', error)
    }
  }

  // Funciones para manejo de márgenes
  const calcularPrecioConGanancia = (producto: Producto): number => {
    if (!producto.costo) return producto.precio || 0
    
    // Usar margen personalizado si existe, sino usar el del producto, sino usar margen global, sino usar el del formulario
    const margen = margenesPersonalizados[producto.id] ?? 
                   (producto.porcentaje_ganancia || margenGlobal || parseFloat(formData.porcentaje_ganancia) || 50)
    const ganancia = (producto.costo * margen) / 100
    return producto.costo + ganancia
  }

  const aplicarMargenGlobal = async () => {
    if (margenGlobal <= 0) {
      toast.warn('Por favor ingresa un margen válido')
      return
    }
    
    try {
      // Actualizar todos los productos con el margen global
      const { error } = await supabase
        .from('productos')
        .update({ porcentaje_ganancia: margenGlobal })
        .neq('id', '00000000-0000-0000-0000-000000000000') // Actualizar todos

      if (error) {
        console.error('Error aplicando margen global:', error)
        toast.error('Error al aplicar el margen global')
        return
      }

      // Actualizar el estado local
      const nuevosMargenes: {[key: string]: number} = {}
      productos.forEach(producto => {
        nuevosMargenes[producto.id] = margenGlobal
      })
      
      setMargenesPersonalizados(nuevosMargenes)
      setProductos(prev => prev.map(producto => ({
        ...producto,
        porcentaje_ganancia: margenGlobal
      })))
      
      toast.success(`Margen del ${margenGlobal}% aplicado a todos los productos`)
    } catch (error) {
      console.error('Error:', error)
      toast.error('Error al aplicar el margen global')
    }
  }

  const actualizarMargenProducto = (productoId: string, nuevoMargen: number) => {
    setMargenesPersonalizados(prev => ({
      ...prev,
      [productoId]: nuevoMargen
    }))
    
    // Marcar el producto como modificado
    setProductosModificados(prev => new Set([...prev, productoId]))
  }

  const actualizarCostoProducto = (productoId: string, nuevoCosto: number) => {
    setProductos(prev => prev.map(producto => 
      producto.id === productoId 
        ? { ...producto, costo: nuevoCosto }
        : producto
    ))
    
    // Marcar el producto como modificado para costo
    setCostosModificados(prev => new Set([...prev, productoId]))
  }

  const guardarProductoCompleto = async (productoId: string) => {
    try {
      const producto = productos.find(p => p.id === productoId)
      if (!producto) {
        toast.warn('Producto no encontrado')
        return
      }

      console.log('Guardando producto completo:', productoId, 'costo:', producto.costo, 'margen:', margenesPersonalizados[productoId])

      // Actualizar tanto el costo como el margen en la tabla productos
      const updateData: any = {}
      
      if (costosModificados.has(productoId)) {
        updateData.costo = producto.costo
      }
      
      if (productosModificados.has(productoId)) {
        updateData.porcentaje_ganancia = margenesPersonalizados[productoId]
      }

      if (Object.keys(updateData).length > 0) {
        const { error: errorProducto } = await supabase
          .from('productos')
          .update(updateData)
          .eq('id', productoId)

        if (errorProducto) {
          console.error('Error actualizando producto:', errorProducto)
          toast.error(`Error al guardar el producto: ${errorProducto.message}`)
          return
        }

        console.log('Producto actualizado en tabla productos')
      }

      // Si hay margen personalizado, también actualizar en margenes_personalizados
      if (productosModificados.has(productoId) && margenesPersonalizados[productoId]) {
        const { data: listas, error: errorListas } = await supabase
          .from('listas_precios')
          .select('id')
          .limit(1)

        if (!errorListas && listas && listas.length > 0) {
          const listaId = listas[0].id
          const margen = margenesPersonalizados[productoId]

          const { error: errorMargen } = await supabase
            .from('margenes_personalizados')
            .upsert({
              lista_precio_id: listaId,
              producto_id: productoId,
              margen_porcentaje: margen
            }, {
              onConflict: 'lista_precio_id,producto_id'
            })

          if (errorMargen) {
            console.error('Error actualizando margen personalizado:', errorMargen)
            // No retornamos aquí porque el margen principal ya se guardó
          }
        }
      }

      // Remover el producto de las listas de modificados
      setCostosModificados(prev => {
        const nuevos = new Set(prev)
        nuevos.delete(productoId)
        return nuevos
      })
      
      setProductosModificados(prev => {
        const nuevos = new Set(prev)
        nuevos.delete(productoId)
        return nuevos
      })

      toast.success('Producto guardado correctamente')
    } catch (error) {
      console.error('Error:', error)
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'
      toast.error(`Error al guardar el producto: ${errorMessage}`)
    }
  }

  const guardarProductoIndividual = async (productoId: string) => {
    try {
      const margen = margenesPersonalizados[productoId]
      if (margen === undefined) {
        toast.warn('No hay margen para guardar')
          return
        }

      console.log('Guardando margen para producto:', productoId, 'margen:', margen)

      // Actualizar el margen en la tabla productos
      const { error: errorProducto } = await supabase
        .from('productos')
        .update({ porcentaje_ganancia: margen })
        .eq('id', productoId)

      if (errorProducto) {
        console.error('Error actualizando margen del producto:', errorProducto)
        toast.error(`Error al guardar el margen del producto: ${errorProducto.message}`)
        return
      }

      console.log('Margen actualizado en tabla productos')

      // Obtener la primera lista de precios para actualizar margenes_personalizados
      const { data: listas, error: errorListas } = await supabase
        .from('listas_precios')
        .select('id')
        .limit(1)
      
      if (!errorListas && listas && listas.length > 0) {
        const listaId = listas[0].id
        console.log('Lista de precios encontrada:', listaId)

        // Actualizar o insertar en margenes_personalizados
        const { error: errorMargen } = await supabase
          .from('margenes_personalizados')
          .upsert({
            lista_precio_id: listaId,
            producto_id: productoId,
            margen_porcentaje: margen
          })

        if (errorMargen) {
          console.error('Error actualizando margen personalizado:', errorMargen)
          // No retornamos aquí porque el margen principal ya se guardó
        } else {
          console.log('Margen actualizado en margenes_personalizados')
        }
      } else {
        console.warn('No se encontraron listas de precios')
      }

      // Actualizar la lista de productos con el nuevo margen
      setProductos(prev => prev.map(producto => 
        producto.id === productoId 
          ? { ...producto, porcentaje_ganancia: margen }
          : producto
      ))

      // Actualizar también el estado de márgenes personalizados para mantener sincronización
      setMargenesPersonalizados(prev => ({
        ...prev,
        [productoId]: margen
      }))

      console.log('Estado actualizado:', {
        productoId,
        margen,
        margenesPersonalizadosActualizados: { ...margenesPersonalizados, [productoId]: margen }
      })

      // Remover el producto de la lista de modificados
      setProductosModificados(prev => {
        const nuevos = new Set(prev)
        nuevos.delete(productoId)
        return nuevos
      })

      toast.success('Margen guardado correctamente')
    } catch (error) {
      console.error('Error:', error)
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'
      toast.error(`Error al guardar el margen del producto: ${errorMessage}`)
    }
  }

  const guardarMargenesPersonalizados = async () => {
    try {
      let margenesGuardados = 0
      let margenesEliminados = 0

      // Obtener la primera lista de precios disponible
      const { data: listas, error: errorListas } = await supabase
        .from('listas_precios')
        .select('id')
        .limit(1)
      
      if (errorListas || !listas || listas.length === 0) {
        console.error('Error obteniendo lista de precios:', errorListas)
        toast.error('No hay listas de precios disponibles')
          return
        }

      const listaId = listas[0].id

      // Procesar todos los márgenes personalizados
      for (const productoId of Object.keys(margenesPersonalizados)) {
        const margen = margenesPersonalizados[productoId]
        
        // Actualizar el margen en la tabla productos
        const { error: errorProducto } = await supabase
          .from('productos')
          .update({ porcentaje_ganancia: margen })
          .eq('id', productoId)
        
        if (errorProducto) {
          console.error('Error actualizando margen del producto:', errorProducto)
          toast.error(`Error al actualizar margen del producto ${productoId}`)
          return
        }
        
        if (margen > 0) {
          const { error } = await supabase
            .from('margenes_personalizados')
            .upsert({
              lista_precio_id: listaId,
              producto_id: productoId,
              margen_porcentaje: margen
            }, {
              onConflict: 'lista_precio_id,producto_id'
            })
          
          if (error) {
            console.error('Error guardando margen personalizado:', error)
            toast.error(`Error al guardar margen para producto ${productoId}`)
          return
        }
          margenesGuardados++
        } else {
          // Si el margen es 0 o negativo, eliminar el registro
          const { error } = await supabase
            .from('margenes_personalizados')
            .delete()
            .eq('lista_precio_id', listaId)
            .eq('producto_id', productoId)
          
          if (error) {
            console.error('Error eliminando margen personalizado:', error)
            toast.error(`Error al eliminar margen para producto ${productoId}`)
            return
          }
          margenesEliminados++
        }
      }

      if (margenesGuardados > 0 || margenesEliminados > 0) {
        // Actualizar la lista de productos con los nuevos márgenes
        setProductos(prev => prev.map(producto => {
          const margenActualizado = margenesPersonalizados[producto.id]
          return margenActualizado !== undefined 
            ? { ...producto, porcentaje_ganancia: margenActualizado }
            : producto
        }))

        // Limpiar la lista de productos modificados
        setProductosModificados(new Set())
        toast.success(`Márgenes guardados: ${margenesGuardados} guardados, ${margenesEliminados} eliminados`)
      } else {
        toast.info('No hay cambios en los márgenes para guardar')
      }
      } catch (error) {
      console.error('Error:', error)
      toast.error('Error al guardar los márgenes personalizados')
    }
  }

  const limpiarMargenes = async () => {
    try {
      // Resetear todos los productos al margen por defecto (50%)
      const { error } = await supabase
        .from('productos')
        .update({ porcentaje_ganancia: 50 })
        .neq('id', '00000000-0000-0000-0000-000000000000') // Actualizar todos
      
      if (error) {
        console.error('Error reseteando márgenes:', error)
        toast.error('Error al resetear los márgenes')
        return
      }

      // Limpiar el estado local
      setMargenesPersonalizados({})
      setProductosModificados(new Set())
      setMargenGlobal(0)
      
      // Recargar productos para obtener los datos actualizados
      await cargarProductos()
      await cargarMargenesPersonalizados()
      
      toast.success('Márgenes reseteados al valor por defecto (50%)')
    } catch (error) {
      console.error('Error:', error)
      toast.error('Error al resetear los márgenes')
    }
  }



  const subirImagen = async (archivo: File) => {
    setSubiendoImagen(true)
    try {
      const formData = new FormData()
      formData.append('file', archivo)
      formData.append('folder', 'productos')

      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData
      })

      if (response.ok) {
        const data = await response.json()
        return data.url
        } else {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Error al subir imagen')
      }
    } catch (error) {
      console.error('Error subiendo imagen:', error)
      toast.error('Error al subir la imagen: ' + (error as Error).message)
      return null
    } finally {
      setSubiendoImagen(false)
    }
  }

  const manejarCambioImagen = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const archivo = e.target.files?.[0]
    if (archivo) {
      const url = await subirImagen(archivo)
      if (url) {
        setFormData(prev => ({ ...prev, foto_url: url }))
      }
    }
  }

  const manejarSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!formData.nombre.trim()) {
      toast.warn('El nombre es obligatorio')
      return
    }

    try {
      const productoData = {
        nombre: formData.nombre.trim(),
        descripcion: formData.descripcion.trim() || null,
        categoria: formData.categoria.trim() || null,
        // precio, costo y porcentaje_ganancia se editan desde la tabla principal
        foto_url: formData.foto_url || null,
        publicado: formData.publicado
      }

      if (productoEditando) {
        const { error } = await supabase
          .from('productos')
          .update(productoData)
          .eq('id', productoEditando.id)

        if (error) throw error
        
        toast.success('Producto actualizado correctamente.')
      } else {
        const { data: nuevoProducto, error } = await supabase
          .from('productos')
          .insert([productoData])
          .select()

        if (error) throw error
        
        // El nuevo producto se creará con valores por defecto
        
        toast.success('Producto agregado correctamente.')
      }

      // Recargar productos para obtener los datos actualizados
      await cargarProductos()
      
      // Si estamos editando un producto, mantener el formulario abierto con los datos actualizados
      if (productoEditando) {
        // Obtener los productos actualizados directamente de la base de datos
        const { data: productosActualizados, error } = await supabase
          .from('productos')
          .select('*')
          .eq('id', productoEditando.id)
          .single()
        
        if (!error && productosActualizados) {
          // Actualizar el producto que se está editando con los datos frescos de la BD
          setProductoEditando(productosActualizados)
          
          // Recalcular el porcentaje con los datos actualizados
          let porcentajeCalculado = '50' // default
          if (productosActualizados.porcentaje_ganancia) {
            porcentajeCalculado = productosActualizados.porcentaje_ganancia.toString()
          } else if (margenesPersonalizados[productosActualizados.id]) {
            porcentajeCalculado = margenesPersonalizados[productosActualizados.id].toString()
          } else if (productosActualizados.costo && productosActualizados.precio && productosActualizados.costo > 0) {
            const porcentaje = ((productosActualizados.precio - productosActualizados.costo) / productosActualizados.costo) * 100
            porcentajeCalculado = porcentaje.toFixed(0)
          }
          
          // Actualizar el formulario con los datos frescos
          setFormData({
            nombre: productosActualizados.nombre,
            descripcion: productosActualizados.descripcion || '',
            categoria: productosActualizados.categoria || '',
            precio: productosActualizados.precio?.toString() || '',
            costo: productosActualizados.costo?.toString() || '',
            porcentaje_ganancia: porcentajeCalculado,
            foto_url: productosActualizados.foto_url || '',
            publicado: productosActualizados.publicado
          })
        }
      } else {
        // Si es un producto nuevo, cerrar el formulario
      setFormData({
        nombre: '',
        descripcion: '',
        categoria: '',
        precio: '',
        costo: '',
        porcentaje_ganancia: '50',
        foto_url: '',
        publicado: true
      })
      setProductoEditando(null)
      setMostrarFormulario(false)
      }
    } catch (error) {
      console.error('Error:', error)
      toast.error('Error al guardar el producto')
    }
  }

  const editarProducto = async (producto: Producto) => {
    try {
      // Obtener los datos frescos directamente de la base de datos
      const { data: productoActualizado, error } = await supabase
        .from('productos')
        .select('*')
        .eq('id', producto.id)
        .single()

      if (error) {
        console.error('Error obteniendo producto actualizado:', error)
        toast.error('Error al cargar los datos del producto')
        return
      }

      if (!productoActualizado) {
        toast.error('Producto no encontrado')
        return
      }

      setProductoEditando(productoActualizado)
      
      // Usar el porcentaje_ganancia de la base de datos, o el margen personalizado, o calcular si no existe
    let porcentajeCalculado = '50' // default
      
      // PRIORIDAD 1: Usar porcentaje_ganancia de la base de datos (incluso si es 0)
      if (productoActualizado.porcentaje_ganancia !== null && productoActualizado.porcentaje_ganancia !== undefined) {
        // Convertir a número y luego a string para asegurar formato correcto
        const porcentajeBD = parseFloat(productoActualizado.porcentaje_ganancia.toString())
        porcentajeCalculado = porcentajeBD.toString()
        console.log('Usando porcentaje_ganancia de BD:', {
          valorOriginal: productoActualizado.porcentaje_ganancia,
          valorParseado: porcentajeBD,
          valorFinal: porcentajeCalculado
        })
      } 
      // PRIORIDAD 2: Usar margen personalizado del estado local
      else if (margenesPersonalizados[productoActualizado.id]) {
        porcentajeCalculado = margenesPersonalizados[productoActualizado.id].toString()
        console.log('Usando margen personalizado:', margenesPersonalizados[productoActualizado.id])
      } 
      // PRIORIDAD 3: Calcular desde precio y costo
      else if (productoActualizado.costo && productoActualizado.precio && productoActualizado.costo > 0) {
        const porcentaje = ((productoActualizado.precio - productoActualizado.costo) / productoActualizado.costo) * 100
      porcentajeCalculado = porcentaje.toFixed(0)
        console.log('Calculando porcentaje desde precio/costo:', porcentaje)
      }
      // PRIORIDAD 4: Usar default 50%
      else {
        console.log('Usando porcentaje por defecto: 50%')
      }
      
      console.log('Editando producto con datos frescos de BD:', {
        id: productoActualizado.id,
        nombre: productoActualizado.nombre,
        porcentaje_ganancia: productoActualizado.porcentaje_ganancia,
        costo: productoActualizado.costo,
        precio: productoActualizado.precio,
        margenPersonalizado: margenesPersonalizados[productoActualizado.id],
        porcentajeCalculado,
        productoCompleto: productoActualizado
      })
      
      const nuevoFormData = {
        nombre: productoActualizado.nombre,
        descripcion: productoActualizado.descripcion || '',
        categoria: productoActualizado.categoria || '',
        precio: productoActualizado.precio?.toString() || '',
        costo: productoActualizado.costo?.toString() || '',
      porcentaje_ganancia: porcentajeCalculado,
        foto_url: productoActualizado.foto_url || '',
        publicado: productoActualizado.publicado
      }
      
      console.log('FormData que se va a establecer:', {
        nombre: nuevoFormData.nombre,
        precio: nuevoFormData.precio,
        productoActualizado: {
          porcentaje_ganancia: productoActualizado.porcentaje_ganancia,
          costo: productoActualizado.costo,
          precio: productoActualizado.precio
        }
      })
      
      setFormData(nuevoFormData)
    setMostrarFormulario(true)
      
      console.log('Formulario abierto - costo y margen se editan desde la tabla')
    } catch (error) {
      console.error('Error:', error)
      toast.error('Error al cargar los datos del producto')
    }
  }

  const cancelarEdicion = () => {
    setProductoEditando(null)
    setFormData({
      nombre: '',
      descripcion: '',
      categoria: '',
      precio: '',
      costo: '',
      porcentaje_ganancia: '50',
      foto_url: '',
      publicado: true
    })
    setCalcularPrecioAutomatico(true)
    setMostrarFormulario(false)
  }

  const eliminarProducto = async (id: string) => {
    const producto = productos.find(p => p.id === id)
    
    confirmAlert({
      title: '🗑️ Confirmar eliminación',
      message: `¿Estás seguro de que deseas eliminar "${producto?.nombre || 'este producto'}"?`,
      buttons: [
        {
          label: 'Cancelar',
          onClick: () => {
            toast.info('Eliminación cancelada')
          },
          className: 'confirm-cancel-button'
        },
        {
          label: 'Eliminar',
          onClick: async () => {
            try {
              const { error } = await supabase
                .from('productos')
                .delete()
                .eq('id', id)

              if (error) throw error

              toast.success('Producto eliminado correctamente')
              await cargarProductos()
            } catch (error) {
              console.error('Error:', error)
              toast.error('Error al eliminar el producto')
            }
          },
          className: 'confirm-delete-button'
        }
      ],
      customUI: ({ onClose, title, message }) => (
        <div style={{
          background: '#FFFFFF',
          borderRadius: '16px',
          padding: '2rem',
          boxShadow: '0 20px 40px rgba(0, 0, 0, 0.15)',
          maxWidth: '400px',
          fontFamily: 'system-ui, -apple-system, sans-serif'
        }}>
          <h2 style={{
            fontSize: '1.25rem',
            fontWeight: '600',
            color: '#111827',
            marginBottom: '1rem',
            textAlign: 'center'
          }}>
            {title}
          </h2>
          <p style={{
            color: '#6B7280',
            marginBottom: '2rem',
            textAlign: 'center',
            lineHeight: '1.5'
          }}>
            {message}
          </p>
          <div style={{
            display: 'flex',
            gap: '1rem',
            justifyContent: 'center'
          }}>
            <button
              onClick={() => {
                toast.info('Eliminación cancelada')
                onClose()
              }}
              style={{
                background: '#F3F4F6',
                color: '#374151',
                border: 'none',
                padding: '0.75rem 1.5rem',
                borderRadius: '8px',
                fontSize: '0.875rem',
                fontWeight: '500',
                cursor: 'pointer',
                transition: 'all 0.2s ease'
              }}
            >
              Cancelar
            </button>
            <button
              onClick={async () => {
                try {
                  const { error } = await supabase
                    .from('productos')
                    .delete()
                    .eq('id', id)

                  if (error) throw error

                  toast.success('Producto eliminado correctamente')
                  await cargarProductos()
                } catch (error) {
                  console.error('Error:', error)
                  toast.error('Error al eliminar el producto')
                }
                onClose()
              }}
              style={{
                background: '#EF4444',
                color: '#FFFFFF',
                border: 'none',
                padding: '0.75rem 1.5rem',
                borderRadius: '8px',
                fontSize: '0.875rem',
                fontWeight: '500',
                cursor: 'pointer',
                transition: 'all 0.2s ease'
              }}
            >
              Eliminar
            </button>
          </div>
        </div>
      )
    })
  }

  const togglePublicado = async (id: string, publicado: boolean) => {
    try {
      const { error } = await supabase
        .from('productos')
        .update({ publicado })
        .eq('id', id)

      if (error) throw error

      await cargarProductos()
    } catch (error) {
      console.error('Error:', error)
      toast.error('Error al actualizar el producto')
    }
  }

  const descargarProductosCSV = () => {
    try {
      // Crear encabezados CSV
      const headers = ['Nombre', 'Descripción', 'Categoría', 'Precio', 'Costo', 'Publicado', 'Foto URL']
      
      // Convertir productos a filas CSV
      const filas = productos.map(producto => [
        `"${(producto.nombre || '').replace(/"/g, '""')}"`,
        `"${(producto.descripcion || '').replace(/"/g, '""')}"`,
        `"${(producto.categoria || '').replace(/"/g, '""')}"`,
        producto.precio || '',
        producto.costo || '',
        producto.publicado ? 'Sí' : 'No',
        `"${(producto.foto_url || '').replace(/"/g, '""')}"`
      ])

      // Crear contenido CSV
      const csvContent = [headers.join(','), ...filas.map(fila => fila.join(','))].join('\n')
      
      // Crear y descargar archivo
      const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' })
      const link = document.createElement('a')
      const url = URL.createObjectURL(blob)
      link.setAttribute('href', url)
      link.setAttribute('download', `productos-${new Date().toISOString().split('T')[0]}.csv`)
      link.style.visibility = 'hidden'
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      
      toast.success('¡Productos descargados exitosamente!')
    } catch (error) {
      console.error('Error descargando CSV:', error)
      toast.error('Error al descargar los productos')
    }
  }

  const manejarArchivoCSV = (e: React.ChangeEvent<HTMLInputElement>) => {
    const archivo = e.target.files?.[0]
    if (archivo && archivo.type === 'text/csv') {
      setArchivoCSV(archivo)
    } else {
      toast.warn('Por favor selecciona un archivo CSV válido')
      e.target.value = ''
    }
  }

  const cargarProductosCSV = async () => {
    if (!archivoCSV) {
      toast.warn('Por favor selecciona un archivo CSV')
      return
    }

    setCargandoCSV(true)
    try {
      const texto = await archivoCSV.text()
      const lineas = texto.split('\n').filter(linea => linea.trim())
      
      if (lineas.length < 2) {
        toast.warn('El archivo CSV debe tener al menos una fila de encabezados y una de datos')
        return
      }

      // Saltar la primera línea (encabezados)
      const filasProductos = lineas.slice(1)
      const productosParaInsertar = []

      for (const fila of filasProductos) {
        // Parsear CSV considerando comillas
        const campos = []
        let campoActual = ''
        let dentroComillas = false
        
        for (let i = 0; i < fila.length; i++) {
          const char = fila[i]
          if (char === '"' && (i === 0 || fila[i-1] === ',')) {
            dentroComillas = true
          } else if (char === '"' && dentroComillas && (i === fila.length - 1 || fila[i+1] === ',')) {
            dentroComillas = false
          } else if (char === ',' && !dentroComillas) {
            campos.push(campoActual.trim())
            campoActual = ''
          } else {
            campoActual += char
          }
        }
        campos.push(campoActual.trim())

        const [nombre, descripcion, categoria, precio, costo, publicado, foto_url] = campos

        if (nombre && nombre.replace(/"/g, '').trim()) {
          const producto = {
            nombre: nombre.replace(/"/g, '').trim(),
            descripcion: descripcion ? descripcion.replace(/"/g, '').trim() : null,
            categoria: categoria ? categoria.replace(/"/g, '').trim() : null,
            precio: precio && precio.trim() ? parseFloat(precio) : null,
            costo: costo && costo.trim() ? parseFloat(costo) : null,
            publicado: publicado ? (publicado.toLowerCase().includes('sí') || publicado.toLowerCase().includes('si') || publicado.toLowerCase().includes('true')) : true,
            foto_url: foto_url ? foto_url.replace(/"/g, '').trim() : null
          }
          productosParaInsertar.push(producto)
        }
      }

      if (productosParaInsertar.length === 0) {
        toast.warn('No se encontraron productos válidos en el archivo CSV')
      return
    }

      // Insertar productos en la base de datos
      const { error } = await supabase
        .from('productos')
        .insert(productosParaInsertar)

      if (error) throw error

      toast.success(`¡${productosParaInsertar.length} productos cargados exitosamente!`)
      setMostrarCargaCSV(false)
      setArchivoCSV(null)
      await cargarProductos()
      
      // Limpiar el input file
      const fileInput = document.querySelector('input[type="file"]') as HTMLInputElement
      if (fileInput) fileInput.value = ''
      
    } catch (error) {
      console.error('Error cargando CSV:', error)
      toast.error('Error al cargar los productos desde el archivo CSV')
    } finally {
      setCargandoCSV(false)
    }
  }

  if (authLoading) {
    return (
      <div style={{
        minHeight: '100vh',
        background: '#F9FAFB',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontFamily: 'system-ui, -apple-system, sans-serif'
      }}>
        <div style={{
          background: '#FFFFFF',
          borderRadius: '12px',
          padding: '2rem',
          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)',
          textAlign: 'center'
        }}>
          <div style={{
            fontSize: '1.2rem',
            color: '#111827',
            marginBottom: '1rem'
          }}>
            Verificando autenticación...
          </div>
        </div>
      </div>
    )
  }

  if (!isAuthenticated) {
    return <AdminAuth onAuthSuccess={() => {}} />
  }

  if (loading) {
    return (
      <div style={{
        minHeight: '100vh',
        background: '#F9FAFB',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{
            width: '60px',
            height: '60px',
            border: '4px solid #E5E7EB',
            borderTop: '4px solid #111827',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto 1rem'
          }}></div>
          <p style={{ color: '#111827', fontSize: '1.1rem' }}>Cargando productos...</p>
        </div>
      </div>
    )
  }

  return (
    <div style={{
      minHeight: '100vh',
      background: '#F9FAFB',
      paddingTop: '100px',
      fontFamily: 'system-ui, -apple-system, sans-serif'
    }}>
      <AdminNavbar />

      <main style={{
        position: 'relative',
        zIndex: 3,
        maxWidth: '1400px',
        margin: '0 auto',
        padding: '2rem 1rem',
        minHeight: '100vh'
      }}>
        {/* Header */}
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          marginBottom: '2rem',
          flexWrap: 'wrap',
          gap: '1rem',
          opacity: isVisible ? 1 : 0,
          transform: isVisible ? 'translateY(0)' : 'translateY(30px)',
          transition: 'all 1s ease-out'
        }}>
          <div>
            <h1 style={{
              fontSize: 'clamp(1.875rem, 5vw, 2.5rem)',
              fontWeight: '700',
              color: '#111827',
              marginBottom: '0.5rem',
              letterSpacing: '-0.025em'
            }}>
              Panel de Administración
            </h1>
            <p style={{
              color: '#6B7280',
              fontSize: '1.1rem'
            }}>
              Gestiona productos y visualiza estadísticas
            </p>
          </div>

          <div style={{
            display: 'flex',
            gap: '1rem',
            flexWrap: 'wrap',
            justifyContent: 'center'
          }}>
            <Link href="/" style={{ textDecoration: 'none' }}>
              <button {...createButtonProps({ variant: 'secondary', size: 'md' })}>
                ← Ir al Inicio
              </button>
            </Link>
            
          
          </div>
        </div>

        {/* Rankings - Solo en móvil, arriba */}
        {isMobile && (
          <div style={{
            marginBottom: '2rem',
            opacity: isVisible ? 1 : 0,
            transform: isVisible ? 'translateY(0)' : 'translateY(30px)',
            transition: 'all 1s ease-out 0.2s'
          }}>
            {/* Ranking de Productos Más Seleccionados */}
            {productosPopulares.length > 0 && (
              <div style={{
                background: '#FFFFFF',
                padding: '1.5rem',
                borderRadius: '16px',
                border: '1px solid #E5E7EB',
                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)',
                marginBottom: '1.5rem'
              }}>
                <h3 style={{
                  fontSize: '1.1rem',
                  fontWeight: '600',
                  color: '#1F2937',
                  marginBottom: '1rem',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  🏆 Productos Más Seleccionados
                </h3>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>
                  {productosPopulares.slice(0, 3).map((producto, index) => (
                    <div key={producto.id} style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '0.75rem',
                      padding: '0.75rem',
                      background: '#F9FAFB',
                      borderRadius: '8px',
                      border: '1px solid #E5E7EB'
                    }}>
                      <div style={{
                        width: '24px',
                        height: '24px',
                        borderRadius: '50%',
                        background: index === 0 ? '#FFD700' : index === 1 ? '#C0C0C0' : '#CD7F32',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        fontSize: '0.75rem',
                        fontWeight: '600',
                        color: '#FFFFFF'
                      }}>
                        {index + 1}
                      </div>
                      <div style={{ flex: 1, minWidth: 0 }}>
                        <p style={{
                          fontSize: '0.875rem',
                          fontWeight: '500',
                          color: '#1F2937',
                          margin: 0,
                          overflow: 'hidden',
                          textOverflow: 'ellipsis',
                          whiteSpace: 'nowrap'
                        }}>
                          {producto.nombre}
                        </p>
                        <p style={{
                          fontSize: '0.75rem',
                          color: '#6B7280',
                          margin: 0
                        }}>
                          {producto.total_selecciones} selecciones
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Ranking de Productos Más Facturados */}
            {productosFacturados.length > 0 && (
              <div style={{
                background: '#FFFFFF',
                padding: '1.5rem',
                borderRadius: '16px',
                border: '1px solid #E5E7EB',
                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'
              }}>
                <h3 style={{
                  fontSize: '1.1rem',
                  fontWeight: '600',
                  color: '#1F2937',
                  marginBottom: '1rem',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  💰 Productos Más Facturados
                </h3>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>
                  {productosFacturados.slice(0, 3).map((producto, index) => (
                    <div key={producto.id} style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '0.75rem',
                      padding: '0.75rem',
                      background: '#F9FAFB',
                      borderRadius: '8px',
                      border: '1px solid #E5E7EB'
                    }}>
                      <div style={{
                        width: '24px',
                        height: '24px',
                        borderRadius: '50%',
                        background: index === 0 ? '#FFD700' : index === 1 ? '#C0C0C0' : '#CD7F32',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        fontSize: '0.75rem',
                        fontWeight: '600',
                        color: '#FFFFFF'
                      }}>
                        {index + 1}
                      </div>
                      <div style={{ flex: 1, minWidth: 0 }}>
                        <p style={{
                          fontSize: '0.875rem',
                          fontWeight: '500',
                          color: '#1F2937',
                          margin: 0,
                          overflow: 'hidden',
                          textOverflow: 'ellipsis',
                          whiteSpace: 'nowrap'
                        }}>
                          {producto.nombre}
                        </p>
                        <p style={{
                          fontSize: '0.75rem',
                          color: '#6B7280',
                          margin: 0
                        }}>
                          ${producto.total_facturado.toFixed(2)}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Productos y Rankings */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: isMobile ? '1fr' : '1fr 400px',
          gap: '2rem',
          marginBottom: '2rem',
          opacity: isVisible ? 1 : 0,
          transform: isVisible ? 'translateY(0)' : 'translateY(30px)',
          transition: 'all 1s ease-out 0.2s'
        }}>
          {/* Productos principales */}
          <div style={{
            background: '#FFFFFF',
            padding: '2rem',
            borderRadius: '16px',
            border: '1px solid #E5E7EB',
            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'
          }}>
            {/* Buscador y controles */}
            <div style={{
              marginBottom: '1.5rem',
              borderBottom: '1px solid #E5E7EB',
              paddingBottom: '1.5rem'
            }}>
              <div style={{
                display: 'grid',
                gridTemplateColumns: '1fr auto',
                gap: '1rem',
                alignItems: 'center',
                marginBottom: '1rem'
              }}>
                <div style={{ position: 'relative' }}>
                  <input
                    type="text"
                    placeholder="Buscar productos por nombre, descripción o categoría..."
                    value={busquedaAdmin}
                    onChange={(e) => setBusquedaAdmin(e.target.value)}
                    style={{
                      width: '100%',
                      padding: '0.75rem 1rem 0.75rem 2.5rem',
                      borderRadius: '10px',
                      border: '1px solid #D1D5DB',
                      fontSize: '0.875rem',
                      outline: 'none',
                      transition: 'all 0.3s ease',
                      boxSizing: 'border-box',
                      background: '#FFFFFF',
                      boxShadow: '0 2px 4px rgba(0, 0, 0, 0.05)'
                    }}
                    onFocus={(e) => {
                      e.target.style.borderColor = '#3B82F6'
                      e.target.style.boxShadow = '0 4px 8px rgba(59, 130, 246, 0.15)'
                    }}
                    onBlur={(e) => {
                      e.target.style.borderColor = '#D1D5DB'
                      e.target.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.05)'
                    }}
                  />
                  {/* Ícono de búsqueda */}
                  <div style={{
                    position: 'absolute',
                    left: '0.75rem',
                    top: '50%',
                    transform: 'translateY(-50%)',
                    color: '#9CA3AF',
                    pointerEvents: 'none'
                  }}>
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <circle cx="11" cy="11" r="8" stroke="currentColor" strokeWidth="2"/>
                      <path d="m21 21-4.35-4.35" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                  </div>
                </div>
                
                <div style={{
                  fontSize: '0.875rem',
                  color: '#6B7280',
                  textAlign: 'right',
                  fontWeight: '500',
                  background: '#F8F9FA',
                  padding: '0.5rem 1rem',
                  borderRadius: '8px',
                  border: '1px solid #E5E7EB'
                }}>
                  📋 {productosFiltrados.length} de {productos.length} productos
                </div>
              </div>
          </div>

            {/* Botones de acción */}
          <div style={{
            display: 'flex',
            gap: '1rem',
            marginBottom: '2rem',
            borderBottom: '1px solid #E5E7EB',
            paddingBottom: '1rem',
            flexWrap: 'wrap'
          }}>
              <button
              onClick={() => setMostrarFormulario(!mostrarFormulario)}
              {...createButtonProps({ variant: 'success', size: 'md' })}
            >
              {mostrarFormulario ? 'Cerrar Formulario' : '+ Agregar Producto'}
            </button>
            
            <button
              onClick={descargarProductosCSV}
              {...createButtonProps({ variant: 'info', size: 'md', disabled: productos.length === 0 })}
            >
              📥 Descargar CSV
            </button>
            
            <button
              onClick={() => setMostrarCargaCSV(!mostrarCargaCSV)}
              {...createButtonProps({ variant: 'warning', size: 'md' })}
            >
              📤 {mostrarCargaCSV ? 'Cerrar Carga' : 'Cargar CSV'}
            </button>


            
          </div>

          {/* Botón de Edición Masiva */}
          <div style={{ marginBottom: '2rem' }}>
            <button
              onClick={() => setMostrarEdicionMasiva(!mostrarEdicionMasiva)}
              style={{
                background: '#8B5CF6',
                color: 'white',
                border: 'none',
                padding: '0.75rem 1.5rem',
                borderRadius: '8px',
                fontSize: '0.875rem',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                boxShadow: '0 4px 15px rgba(139, 92, 246, 0.3)'
              }}
              onMouseOver={(e) => {
                e.currentTarget.style.transform = 'translateY(-2px)'
                e.currentTarget.style.boxShadow = '0 6px 20px rgba(139, 92, 246, 0.4)'
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.transform = 'translateY(0)'
                e.currentTarget.style.boxShadow = '0 4px 15px rgba(139, 92, 246, 0.3)'
              }}
            >
              💰 {mostrarEdicionMasiva ? 'Cerrar Edición Masiva' : 'Edición Masiva de Márgenes'}
            </button>

            {/* Panel de Edición Masiva */}
            {mostrarEdicionMasiva && (
              <div style={{
                background: '#F8F9FA',
                padding: '1.5rem',
                borderRadius: '12px',
                border: '1px solid #E5E7EB',
                marginTop: '1rem'
              }}>
                <h3 style={{
                  fontSize: '1.125rem',
                  fontWeight: '600',
                  color: '#111827',
                  marginBottom: '1rem'
                }}>
                  💰 Edición Masiva de Márgenes
                </h3>
                
                <div style={{
                  display: 'grid',
                  gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
                  gap: '1rem',
                  marginBottom: '1rem'
                }}>
                  {/* Margen Global */}
                  <div>
                    <label style={{
                      display: 'block',
                      fontSize: '0.875rem',
                      fontWeight: '500',
                      color: '#374151',
                      marginBottom: '0.5rem'
                    }}>
                      Margen Global (%)
                    </label>
                    <div style={{ display: 'flex', gap: '0.5rem' }}>
                      <input
                        type="number"
                        placeholder="Ej: 50"
                        value={margenGlobal || ''}
                        onChange={(e) => setMargenGlobal(parseFloat(e.target.value) || 0)}
                        style={{
                          flex: 1,
                          padding: '0.5rem 0.75rem',
                          borderRadius: '6px',
                          border: '1px solid #D1D5DB',
                          background: '#FFFFFF',
                          color: '#111827',
                          fontSize: '0.875rem',
                          outline: 'none'
                        }}
                      />
                      <button
                        onClick={aplicarMargenGlobal}
                        style={{
                          background: '#8B5CF6',
                          color: 'white',
                          border: 'none',
                          padding: '0.5rem 1rem',
                          borderRadius: '6px',
                          fontSize: '0.875rem',
                          fontWeight: '500',
                          cursor: 'pointer',
                          whiteSpace: 'nowrap'
                        }}
                      >
                        Aplicar
                      </button>
                    </div>
                  </div>
                </div>

                {/* Botones de Acción */}
                <div style={{
                  display: 'flex',
                  gap: '1rem',
                  justifyContent: 'center',
                  flexWrap: 'wrap'
                }}>
                  <button
                    onClick={guardarMargenesPersonalizados}
                    style={{
                      background: '#10B981',
                      color: 'white',
                      border: 'none',
                      padding: '0.75rem 1.5rem',
                      borderRadius: '8px',
                      fontSize: '0.875rem',
                      fontWeight: '600',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      boxShadow: '0 4px 15px rgba(16, 185, 129, 0.3)'
                    }}
                    onMouseOver={(e) => {
                      e.currentTarget.style.transform = 'translateY(-2px)'
                      e.currentTarget.style.boxShadow = '0 6px 20px rgba(16, 185, 129, 0.4)'
                    }}
                    onMouseOut={(e) => {
                      e.currentTarget.style.transform = 'translateY(0)'
                      e.currentTarget.style.boxShadow = '0 4px 15px rgba(16, 185, 129, 0.3)'
                    }}
                  >
                    💾 Guardar Márgenes
                  </button>
                </div>
              </div>
            )}
          </div>


          {/* Sección de carga CSV */}
          {mostrarCargaCSV && (
            <div style={{
              background: '#F8F9FA',
              padding: '1.5rem',
              borderRadius: '12px',
              border: '1px solid #E5E7EB',
              marginBottom: '2rem'
            }}>
              <h3 style={{
                fontSize: '1.125rem',
                fontWeight: '600',
                color: '#111827',
                marginBottom: '1rem',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem'
              }}>
                📤 Cargar Productos desde CSV
              </h3>
              
              <div style={{
                background: '#FEF3C7',
                border: '1px solid #F59E0B',
                borderRadius: '8px',
                padding: '1rem',
                marginBottom: '1rem'
              }}>
                <p style={{
                  color: '#92400E',
                  fontSize: '0.875rem',
                  margin: '0 0 0.5rem 0',
                  fontWeight: '500'
                }}>
                  📋 Formato del archivo CSV:
                </p>
                <p style={{
                  color: '#92400E',
                  fontSize: '0.75rem',
                  margin: 0,
                  fontFamily: 'monospace',
                  lineHeight: '1.4'
                }}>
                  Nombre,Descripción,Categoría,Precio,Costo,Publicado,Foto URL<br/>
                  "Producto 1","Descripción del producto","Categoría",10.99,5.50,Sí,"https://..."<br/>
                  "Producto 2","Otra descripción","Otra categoría",15.00,8.00,No,""
                </p>
              </div>
              
              <div style={{
                display: 'flex',
                gap: '1rem',
                alignItems: 'end',
                flexWrap: 'wrap'
              }}>
                <div style={{ flex: 1, minWidth: '200px' }}>
                  <label style={{
                    display: 'block',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '0.5rem'
                  }}>
                    Seleccionar archivo CSV
                  </label>
                  <input
                    type="file"
                    accept=".csv"
                    onChange={manejarArchivoCSV}
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      borderRadius: '8px',
                      border: '1px solid #D1D5DB',
                      fontSize: '0.875rem',
                      backgroundColor: '#FFFFFF',
                      cursor: 'pointer',
                      boxSizing: 'border-box'
                    }}
                  />
                </div>
                
                <button
                  onClick={cargarProductosCSV}
                  {...createButtonProps({ 
                    variant: 'success', 
                    size: 'md', 
                    disabled: !archivoCSV || cargandoCSV 
                  })}
                >
                  {cargandoCSV ? 'Cargando...' : '📤 Cargar'}
                </button>
              </div>
            </div>
          )}

            {/* Lista de Productos - Vista de Tabla */}
            {/* Vista de Tabla */}
              <div style={{
                background: '#FFFFFF',
                borderRadius: '12px',
                border: '1px solid #E5E7EB',
                boxShadow: '0 2px 8px rgba(0, 0, 0, 0.05)',
                marginTop: '2rem',
                overflow: 'hidden'
              }}>
                <div style={{
                  background: '#F8F9FA',
                  padding: '1rem',
                  borderBottom: '1px solid #E5E7EB'
                }}>
                  <h3 style={{
                    fontSize: '1.125rem',
                    fontWeight: '600',
                    color: '#111827',
                    margin: 0
                  }}>
                    📊 Gestión de Productos - Vista Tabla
                  </h3>
                </div>
                
                <div style={{ overflowX: 'auto' }}>
                  <table style={{
                    width: '100%',
                    borderCollapse: 'collapse'
                  }}>
                    <thead>
                      <tr style={{
                        background: '#F3F4F6',
                        borderBottom: '2px solid #E5E7EB'
                      }}>
                        <th style={{ padding: '1rem', textAlign: 'left', fontWeight: '600', color: '#374151' }}>Producto</th>
                        <th style={{ padding: '1rem', textAlign: 'left', fontWeight: '600', color: '#374151' }}>Categoría</th>
                        <th style={{ padding: '1rem', textAlign: 'right', fontWeight: '600', color: '#374151' }}>Costo</th>
                        <th style={{ padding: '1rem', textAlign: 'right', fontWeight: '600', color: '#374151' }}>Margen (%)</th>
                        <th style={{ padding: '1rem', textAlign: 'right', fontWeight: '600', color: '#374151' }}>Precio Final</th>
                        <th style={{ padding: '1rem', textAlign: 'center', fontWeight: '600', color: '#374151' }}>Estado</th>
                        <th style={{ padding: '1rem', textAlign: 'center', fontWeight: '600', color: '#374151' }}>Acciones</th>
                      </tr>
                    </thead>
                    <tbody>
                      {productosFiltrados.map((producto, index) => {
                        const precioConGanancia = calcularPrecioConGanancia(producto)
                        const margenActual = margenesPersonalizados[producto.id] ?? 
                                           (producto.porcentaje_ganancia || margenGlobal || parseFloat(formData.porcentaje_ganancia) || 50)
                        
                        return (
                          <tr key={producto.id} style={{
                            borderBottom: '1px solid #E5E7EB',
                            background: index % 2 === 0 ? '#FFFFFF' : '#F9FAFB'
                          }}>
                            <td style={{ padding: '1rem' }}>
                              <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
                                {producto.foto_url && (
                                  <img
                                    src={producto.foto_url}
                                    alt={producto.nombre}
                                    style={{
                                      width: '40px',
                                      height: '40px',
                                      borderRadius: '8px',
                                      objectFit: 'cover'
                                    }}
                                  />
                                )}
                                <div>
                                  <div style={{ fontWeight: '600', color: '#111827', marginBottom: '0.25rem' }}>
                                    {producto.nombre}
                                  </div>
                                  {producto.descripcion && (
                                    <div style={{ fontSize: '0.875rem', color: '#6B7280' }}>
                                      {producto.descripcion.length > 50 
                                        ? `${producto.descripcion.substring(0, 50)}...` 
                                        : producto.descripcion
                                      }
                                    </div>
                                  )}
                                </div>
                              </div>
                            </td>
                            <td style={{ padding: '1rem', color: '#6B7280' }}>
                              {producto.categoria || 'Sin categoría'}
                            </td>
                            <td style={{ padding: '1rem', textAlign: 'right' }}>
                              <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', justifyContent: 'flex-end' }}>
                                <input
                                  type="number"
                                  value={producto.costo || ''}
                                  onChange={(e) => {
                                    const nuevoCosto = parseFloat(e.target.value) || 0
                                    actualizarCostoProducto(producto.id, nuevoCosto)
                                  }}
                                  style={{
                                    width: '100px',
                                    padding: '0.25rem 0.5rem',
                                    borderRadius: '4px',
                                    border: '1px solid #D1D5DB',
                                    fontSize: '0.875rem',
                                    textAlign: 'right'
                                  }}
                                  placeholder="0.00"
                                />
                                <span style={{ color: '#6B7280', fontSize: '0.875rem' }}>$</span>
                              </div>
                            </td>
                            <td style={{ padding: '1rem', textAlign: 'right' }}>
                              <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', justifyContent: 'flex-end' }}>
                                <input
                                  type="number"
                                  value={margenActual}
                                  onChange={(e) => {
                                    const nuevoMargen = parseFloat(e.target.value) || 0
                                    actualizarMargenProducto(producto.id, nuevoMargen)
                                  }}
                                  style={{
                                    width: '80px',
                                    padding: '0.25rem 0.5rem',
                                    borderRadius: '4px',
                                    border: '1px solid #D1D5DB',
                                    fontSize: '0.875rem',
                                    textAlign: 'right'
                                  }}
                                />
                                <span style={{ color: '#6B7280', fontSize: '0.875rem' }}>%</span>
                              </div>
                            </td>
                            <td style={{ padding: '1rem', textAlign: 'right', fontWeight: '600', color: '#10B981' }}>
                              ${precioConGanancia.toFixed(2)}
                            </td>
                            <td style={{ padding: '1rem', textAlign: 'center' }}>
                              <div
                                onClick={() => togglePublicado(producto.id, !producto.publicado)}
                                style={{
                                  cursor: 'pointer',
                                  fontSize: '1.5rem',
                                  color: producto.publicado ? '#10B981' : '#EF4444',
                                  fontWeight: 'bold',
                                  transition: 'color 0.2s ease'
                                }}
                                title={producto.publicado ? 'Producto visible - Click para ocultar' : 'Producto oculto - Click para mostrar (si no está marcado, el producto no se ve)'}
                                onMouseOver={(e) => {
                                  e.currentTarget.style.opacity = '0.7'
                                }}
                                onMouseOut={(e) => {
                                  e.currentTarget.style.opacity = '1'
                                }}
                              >
                                {producto.publicado ? '✓' : '✗'}
                              </div>
                            </td>
                            <td style={{ padding: '1rem', textAlign: 'center' }}>
                              <div style={{ display: 'flex', gap: '0.5rem', justifyContent: 'center' }}>
                                {(costosModificados.has(producto.id) || productosModificados.has(producto.id)) && (
                                  <button
                                    onClick={() => guardarProductoCompleto(producto.id)}
                                    style={{
                                      background: '#10B981',
                                      color: 'white',
                                      border: 'none',
                                      padding: '0.25rem 0.5rem',
                                      borderRadius: '4px',
                                      fontSize: '0.75rem',
                                      cursor: 'pointer',
                                      fontWeight: '500'
                                    }}
                                    onMouseOver={(e) => {
                                      e.currentTarget.style.backgroundColor = '#059669'
                                    }}
                                    onMouseOut={(e) => {
                                      e.currentTarget.style.backgroundColor = '#10B981'
                                    }}
                                    title="Guardar cambios"
                                  >
                                    💾
                                  </button>
                                )}
                                <button
                                  onClick={() => {
                                    setProductoEditando(producto)
                                    setFormData({
                                      nombre: producto.nombre,
                                      descripcion: producto.descripcion || '',
                                      categoria: producto.categoria || '',
                                      precio: producto.precio?.toString() || '',
                                      costo: producto.costo?.toString() || '',
                                      porcentaje_ganancia: '50',
                                      foto_url: producto.foto_url || '',
                                      publicado: producto.publicado
                                    })
                                    setMostrarFormulario(true)
                                  }}
                                  style={{
                                    background: '#3B82F6',
                                    color: 'white',
                                    border: 'none',
                                    padding: '0.25rem 0.5rem',
                                    borderRadius: '4px',
                                    fontSize: '0.75rem',
                                    cursor: 'pointer'
                                  }}
                                  title="Editar producto"
                                >
                                  ✏️
                                </button>
                                <button
                                  onClick={() => eliminarProducto(producto.id)}
                                  style={{
                                    background: '#EF4444',
                                    color: 'white',
                                    border: 'none',
                                    padding: '0.25rem 0.5rem',
                                    borderRadius: '4px',
                                    fontSize: '0.75rem',
                                    cursor: 'pointer'
                                  }}
                                  title="Eliminar producto"
                                >
                                  🗑️
                                </button>
                              </div>
                            </td>
                          </tr>
                        )
                      })}
                    </tbody>
                  </table>
                </div>
              </div>

            {/* Mensaje cuando no hay productos */}
            {productosFiltrados.length === 0 && (
              <div style={{
                textAlign: 'center',
                padding: '3rem 1rem',
                color: '#6B7280',
                background: '#F9FAFB',
                borderRadius: '12px',
                border: '1px solid #E5E7EB'
              }}>
                <div style={{
                  fontSize: '3rem',
                  marginBottom: '1rem'
                }}>
                  📦
                </div>
                <h3 style={{
                  fontSize: '1.125rem',
                  fontWeight: '600',
                  color: '#111827',
                  marginBottom: '0.5rem'
                }}>
                  {busquedaAdmin ? 'No se encontraron productos' : 'No hay productos'}
                </h3>
                <p style={{
                  fontSize: '0.875rem',
                  color: '#6B7280',
                  marginBottom: '1.5rem'
                }}>
                  {busquedaAdmin 
                    ? `No hay productos que coincidan con "${busquedaAdmin}"`
                    : 'Comienza agregando tu primer producto'
                  }
                </p>
                {!busquedaAdmin && (
                  <button
                    onClick={() => setMostrarFormulario(true)}
                    {...createButtonProps({ variant: 'primary', size: 'md' })}
                  >
                    + Crear Primer Producto
                  </button>
                )}
              </div>
            )}
          </div>

          {/* Rankings en formato cuadrado - Solo en desktop */}
          {!isMobile && (
        <div style={{
            display: 'flex',
            flexDirection: 'column',
            gap: '1.5rem'
          }}>
            {/* Ranking de Productos Más Seleccionados */}
          {productosPopulares.length > 0 && (
              <div style={{
                background: '#FFFFFF',
              padding: '1.5rem',
                borderRadius: '16px',
                border: '1px solid #E5E7EB',
                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'
        }}>
          <h3 style={{
                  fontSize: '1.125rem',
                fontWeight: '600',
                  color: '#111827',
                marginBottom: '1rem',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem'
              }}>
                  🏆 Más Seleccionados
          </h3>
              
            <div style={{
              display: 'flex',
                flexDirection: 'column',
                  gap: '0.75rem'
              }}>
                  {productosPopulares.slice(0, 5).map((producto, index) => (
              <div key={producto.id} style={{
                      background: '#F9FAFB',
                      padding: '0.75rem',
                      borderRadius: '8px',
                  display: 'flex',
                  alignItems: 'center',
                    justifyContent: 'space-between',
                      border: '1px solid #E5E7EB',
                      transition: 'all 0.2s ease'
              }}
              onMouseOver={(e) => {
                      e.currentTarget.style.background = '#F3F4F6'
                      e.currentTarget.style.transform = 'translateX(2px)'
              }}
              onMouseOut={(e) => {
                      e.currentTarget.style.background = '#F9FAFB'
                    e.currentTarget.style.transform = 'translateX(0)'
              }}>
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                        gap: '0.75rem',
                      flex: 1
                }}>
                  <div style={{
                          width: '24px',
                          height: '24px',
                          borderRadius: '6px',
                          background: index === 0 ? '#F59E0B' :
                                     index === 1 ? '#6B7280' :
                                     index === 2 ? '#D97706' :
                                     '#9CA3AF',
                    display: 'flex',
                    alignItems: 'center',
                        justifyContent: 'center',
                          fontSize: '0.75rem',
                          fontWeight: '600',
                          color: '#FFFFFF'
                      }}>
                        {index + 1}
                  </div>
                  
                      <div style={{ flex: 1 }}>
                            <p style={{
                            fontWeight: '500',
                            fontSize: '0.875rem',
                            color: '#111827',
                margin: 0
                      }}>
                        {producto.nombre}
                            </p>
                    </div>
            </div>

              <div style={{
                        textAlign: 'right'
              }}>
                      <p style={{
                          fontSize: '0.875rem',
                    fontWeight: '600',
                          color: '#111827',
                          margin: 0
                      }}>
                        {producto.total_selecciones}
                </p>
                    </div>
                      </div>
                ))}
                  </div>
          </div>
        )}
                  
            {/* Ranking de Productos Más Facturados */}
            {productosFacturados.length > 0 && (
                  <div style={{
                background: '#FFFFFF',
              padding: '1.5rem',
                borderRadius: '16px',
                border: '1px solid #E5E7EB',
                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'
        }}>
          <h3 style={{
                  fontSize: '1.125rem',
                fontWeight: '600',
                  color: '#111827',
                marginBottom: '1rem',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.5rem'
              }}>
                  💰 Más Facturados
          </h3>
                
            <div style={{
              display: 'flex',
                  flexDirection: 'column',
                  gap: '0.75rem'
                }}>
                  {productosFacturados.map((producto, index) => (
              <div key={producto.id} style={{
                      background: '#F9FAFB',
                      padding: '0.75rem',
                      borderRadius: '8px',
                  display: 'flex',
                  alignItems: 'center',
                      justifyContent: 'space-between',
                      border: '1px solid #E5E7EB',
                      transition: 'all 0.2s ease'
                      }}
                      onMouseOver={(e) => {
                      e.currentTarget.style.background = '#F3F4F6'
                      e.currentTarget.style.transform = 'translateX(2px)'
                      }}
                      onMouseOut={(e) => {
                      e.currentTarget.style.background = '#F9FAFB'
                      e.currentTarget.style.transform = 'translateX(0)'
              }}>
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                        gap: '0.75rem',
                        flex: 1
                }}>
                  <div style={{
                          width: '24px',
                          height: '24px',
                          borderRadius: '6px',
                          background: index === 0 ? '#10B981' :
                                     index === 1 ? '#6B7280' :
                                     index === 2 ? '#D97706' :
                                     '#9CA3AF',
                    display: 'flex',
                    alignItems: 'center',
              justifyContent: 'center',
                          fontSize: '0.75rem',
                          fontWeight: '600',
                          color: '#FFFFFF'
                        }}>
                          {index + 1}
                  </div>
                  
                        <div style={{ flex: 1 }}>
                      <p style={{
                            fontWeight: '500',
                            fontSize: '0.875rem',
                            color: '#111827',
                            margin: 0
                          }}>
                            {producto.nombre}
                </p>
                </div>
              </div>
            
              <div style={{
                        textAlign: 'right'
              }}>
          <p style={{
                          fontSize: '0.875rem',
                  fontWeight: '600',
                          color: '#111827',
                          margin: 0
                        }}>
                          ${producto.total_facturado.toFixed(2)}
                        </p>
                </div>
              </div>
            ))}
                </div>
              </div>
            )}
          </div>
        </div>
        )}
      </main>

      {/* Modal de Formulario */}
      {mostrarFormulario && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.6)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000,
          padding: '1rem'
        }}>
          <div style={{
            background: '#FFFFFF',
            borderRadius: '20px',
            padding: '2rem',
            maxWidth: '500px',
            width: '100%',
            maxHeight: '90vh',
            overflowY: 'auto',
            boxShadow: '0 20px 40px rgba(0, 0, 0, 0.15)',
            fontFamily: 'system-ui, -apple-system, sans-serif'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '2rem'
            }}>
              <h2 style={{
                color: '#111827',
                margin: 0,
              fontWeight: '700',
                fontSize: '1.5rem'
            }}>
              {productoEditando ? 'Editar Producto' : 'Nuevo Producto'}
              </h2>
              <button
                onClick={cancelarEdicion}
                style={{
                  background: 'none',
                  border: 'none',
                  fontSize: '1.5rem',
                  cursor: 'pointer',
                  color: '#6B7280',
                  padding: '0.5rem',
                  borderRadius: '6px',
                  transition: 'all 0.2s ease'
                }}
                onMouseOver={(e) => {
                  e.currentTarget.style.background = '#F3F4F6'
                  e.currentTarget.style.color = '#111827'
                }}
                onMouseOut={(e) => {
                  e.currentTarget.style.background = 'none'
                  e.currentTarget.style.color = '#6B7280'
                }}
              >
                ✕
              </button>
            </div>

            <form onSubmit={manejarSubmit}>
              <div style={{ marginBottom: '1.5rem' }}>
                <label style={{
                  display: 'block',
                  marginBottom: '0.5rem',
                  fontWeight: '500',
                  color: '#374151',
                  fontSize: '0.875rem'
                }}>
                  Nombre *
                </label>
                <input
                  type="text"
                  name="nombre"
                  value={formData.nombre}
                  onChange={(e) => setFormData({...formData, [e.target.name]: e.target.value})}
                  required
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    borderRadius: '8px',
                    border: '1px solid #D1D5DB',
                    fontSize: '1rem',
                    outline: 'none',
                    transition: 'border-color 0.2s ease',
                    boxSizing: 'border-box'
                  }}
                  onFocus={(e) => {
                    e.target.style.borderColor = '#3B82F6'
                  }}
                  onBlur={(e) => {
                    e.target.style.borderColor = '#D1D5DB'
                  }}
                />
              </div>
              
              <div style={{ marginBottom: '1.5rem' }}>
                <label style={{
                  display: 'block',
                  marginBottom: '0.5rem',
                  fontWeight: '500',
                  color: '#374151',
                  fontSize: '0.875rem'
                }}>
                  Descripción
                </label>
                <textarea
                  name="descripcion"
                  value={formData.descripcion}
                  onChange={(e) => setFormData({...formData, [e.target.name]: e.target.value})}
                  rows={3}
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    borderRadius: '8px',
                    border: '1px solid #D1D5DB',
                    fontSize: '1rem',
                    outline: 'none',
                    transition: 'border-color 0.2s ease',
                    resize: 'vertical',
                    fontFamily: 'system-ui, -apple-system, sans-serif',
                    boxSizing: 'border-box'
                  }}
                  onFocus={(e) => {
                    e.target.style.borderColor = '#3B82F6'
                  }}
                  onBlur={(e) => {
                    e.target.style.borderColor = '#D1D5DB'
                  }}
                />
              </div>
              
              <div style={{ marginBottom: '1.5rem' }}>
                <label style={{
                  display: 'block',
                  marginBottom: '0.5rem',
                  fontWeight: '500',
                  color: '#374151',
                  fontSize: '0.875rem'
                }}>
                  Categoría
                </label>
                <input
                  type="text"
                  name="categoria"
                  value={formData.categoria}
                  onChange={(e) => setFormData({...formData, [e.target.name]: e.target.value})}
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    borderRadius: '8px',
                    border: '1px solid #D1D5DB',
                    fontSize: '1rem',
                    outline: 'none',
                    transition: 'border-color 0.2s ease',
                    boxSizing: 'border-box'
                  }}
                  onFocus={(e) => {
                    e.target.style.borderColor = '#3B82F6'
                  }}
                  onBlur={(e) => {
                    e.target.style.borderColor = '#D1D5DB'
                  }}
                />
              </div>
              
              {/* Costo y margen se editan desde la tabla principal */}

              {/* Precio se calcula automáticamente desde costo y margen en la tabla */}
                
            <div style={{ marginBottom: '1.5rem' }}>
                  <label style={{
                    display: 'block',
                marginBottom: '0.5rem',
                fontWeight: '500',
                color: '#374151',
                fontSize: '0.875rem'
              }}>
                Foto del Producto
                  </label>
                  <input
                  type="file"
                  accept="image/*"
                  onChange={manejarCambioImagen}
                    style={{
                      width: '100%',
                    padding: '0.75rem',
                    borderRadius: '8px',
                    border: '1px solid #D1D5DB',
                      fontSize: '1rem',
                      outline: 'none',
                    transition: 'border-color 0.2s ease',
                    backgroundColor: '#F9FAFB',
                    boxSizing: 'border-box'
                  }}
                />
                {formData.foto_url && (
                  <div style={{ marginTop: '0.5rem' }}>
                    <img
                      src={formData.foto_url}
                      alt="Preview"
                    style={{
                        width: '100px',
                        height: '100px',
                        objectFit: 'cover',
                        borderRadius: '8px',
                        border: '1px solid #E5E7EB'
                    }}
                  />
                </div>
                )}
              </div>
              
              <div style={{
                display: 'flex',
                alignItems: 'center',
                marginBottom: '2rem'
              }}>
                <input
                  type="checkbox"
                  name="publicado"
                  checked={formData.publicado}
                  onChange={(e) => setFormData({...formData, [e.target.name]: e.target.checked})}
                  style={{
                    marginRight: '0.5rem',
                    width: '1rem',
                    height: '1rem'
                  }}
                />
                <label style={{
                  fontWeight: '500',
                  color: '#374151',
                  fontSize: '0.875rem'
                }}>
                  Publicar producto inmediatamente
                </label>
              </div>
              
              <div style={{
                display: 'flex',
                gap: '1rem',
                justifyContent: 'flex-end'
              }}>
                <button
                  type="button"
                  onClick={cancelarEdicion}
                  style={{
                    background: '#FFFFFF',
                    color: '#6B7280',
                    border: '1px solid #D1D5DB',
                    padding: '0.75rem 1.5rem',
                    borderRadius: '8px',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    cursor: 'pointer',
                    transition: 'all 0.2s ease'
                  }}
                  onMouseOver={(e) => {
                    e.currentTarget.style.background = '#F3F4F6'
                    e.currentTarget.style.color = '#374151'
                  }}
                  onMouseOut={(e) => {
                    e.currentTarget.style.background = '#FFFFFF'
                    e.currentTarget.style.color = '#6B7280'
                  }}
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  disabled={subiendoImagen}
                  style={{
                    background: subiendoImagen ? '#9CA3AF' : '#3B82F6',
                    color: '#FFFFFF',
                    border: 'none',
                    padding: '0.75rem 1.5rem',
                    borderRadius: '8px',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    cursor: subiendoImagen ? 'not-allowed' : 'pointer',
                    transition: 'all 0.2s ease'
                  }}
                  onMouseOver={(e) => {
                    if (!subiendoImagen) {
                      e.currentTarget.style.background = '#2563EB'
                  }
                  }}
                  onMouseOut={(e) => {
                    if (!subiendoImagen) {
                      e.currentTarget.style.background = '#3B82F6'
                    }
                  }}
                >
                  {subiendoImagen ? 'Subiendo imagen...' : (productoEditando ? 'Actualizar' : 'Crear Producto')}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}